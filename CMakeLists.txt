cmake_minimum_required(VERSION 3.14)

include(cmake/PreventInSourceBuilds.cmake)


# ---- Initialize Project ----

# used to support find_package
set(package_name "cppdash")


# create base project
project(
  cppdash
  VERSION 2.1.2
  DESCRIPTION "Geometry Dash Api wrapper for C++"
  LANGUAGES CXX
)

# don't change include order, OptionVariables checks if project is top level
include(cmake/ProjectIsTopLevel.cmake)
include(cmake/OptionVariables.cmake)

if(PROJECT_IS_TOP_LEVEL)
  find_program(CCACHE_FOUND ccache)
  if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  endif()
endif()

if(PROJECT_IS_TOP_LEVEL)
  if(CMAKE_GENERATOR STREQUAL "Ninja")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-color=always")
    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fcolor-diagnostics")
    endif()
    if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
      SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdiagnostics-color=always")
    elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
      SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fcolor-diagnostics")
    endif()
  endif()
endif()


# ---- Declare Library ----

# target that we can modify (can't modify ALIAS targets)
# target name should not be the same as ${PROJECT_NAME}, causes add_subdirectory issues
set(target_name "cppdash-lib")
add_library(${target_name} ${build_type})

# alias to cause error at configuration time instead of link time if target is missing
add_library(cppdash::cppdash ALIAS ${target_name})

# add /include files to target
# this is solely for IDE benefit, doesn't affect building, so unconditionally list magic_enum
target_sources(
  ${target_name} PRIVATE
  # include
  include/cppdash/client.hpp
)

# add /src files to target
target_sources(
  ${target_name} PRIVATE
  # src
  src/client.cpp
)


target_compile_options(
  ${target_name}
  PRIVATE
  $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -Werror=return-type -Wshadow -Wundef>
  $<$<CXX_COMPILER_ID:GNU>:-Wuseless-cast -Wnonnull-compare>
  $<$<CXX_COMPILER_ID:MSVC>:/W4 /WX /permissive->
)

# ---- Generate Build Info Headers ----

# used in export header generated below
if(build_type STREQUAL "STATIC")
  target_compile_definitions(${target_name} PUBLIC LIBCPPDASH_STATIC_DEFINE)
  set(LIBCPPDASH_STATIC_DEFINE TRUE)
endif()

# ---- Library Properties ----

# hide all symbols by default
# use SameMajorVersion versioning for shared library runtime linker lookup
set_target_properties(
  ${target_name} PROPERTIES
  CXX_VISIBILITY_PRESET hidden
  VISIBILITY_INLINES_HIDDEN YES
  VERSION "${PROJECT_VERSION}"
  SOVERSION "${PROJECT_VERSION_MAJOR}"
  EXPORT_NAME "cppdash"
  OUTPUT_NAME "cppdash"
)

# header files generated by CMake
target_include_directories(
  ${target_name} SYSTEM PUBLIC
  "$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>"
)

# header files from /include
target_include_directories(
  ${target_name} ${warning_guard} PUBLIC
  "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
)

target_compile_features(
  ${target_name}
  PUBLIC ${LIBCPPDASH_DESIRED_CXX_STANDARD}
)

if(LIBCPPDASH_SANITIZER_BUILD)
  add_compile_options(-fsanitize=address)
  add_link_options(-fsanitize=address)
endif()


if(LIBCPPDASH_BUILD_TESTING)
  target_compile_definitions(${target_name} PRIVATE LIBCPPDASH_BUILD_TESTING)

  # need to enable testing in case BUILD_TESTING is disabled
  # ctest expects that the top level project enables testing
  if(PROJECT_IS_TOP_LEVEL)
      enable_testing()
  endif()

  # tell unit tests where our files are
  set(LIBCPPDASH_BINARY_DIR "${PROJECT_BINARY_DIR}")
  set(LIBCPPDASH_SOURCE_DIR "${PROJECT_SOURCE_DIR}")

  # include test project
  # add_subdirectory(tests)
  include(tests/CMakeLists.txt)
endif()
